@page "/Profiles"
@using System.Text
@using ClashCs.Config
@using ClashCs.Entity
@using MemoryPack
@inject IHttpClientFactory ClientFactory
@inject ISnackbar Snackbar

<PageTitle>Profiles</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium">

    <div class="d-flex flex-row align-center gap-x-6">
        <MudTextField Class="flex-grow-2" T="string" @bind-Text="SubscriptionLink" Label="Subscription Link" Variant="Variant.Outlined"></MudTextField>
        <MudButton Class="flex-grow-1" Disabled="@_processing" Variant="Variant.Filled" Style="height: 52px" OnClick="@GetClashConfigAsync">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Processing</MudText>
            }
            else
            {
                <MudText>Download</MudText>
            }
        </MudButton>
        <MudButton Class="flex-grow-1" Variant="Variant.Filled" Style="height: 52px">Update All</MudButton>
    </div>


</MudContainer>

@code {
    public string? SubscriptionLink { get; set; }
    private bool _processing;

    protected async Task GetClashConfigAsync()
    {
        if (!string.IsNullOrEmpty(SubscriptionLink))
        {
            _processing = true;
            var client = ClientFactory.CreateClient();
            client.DefaultRequestHeaders.UserAgent.ParseAdd(Util.UA);
            var uri = new Uri(SubscriptionLink.Replace('\t', ' ').Trim());
            var response = await client.GetAsync(uri);
            response.EnsureSuccessStatusCode();
            var filename = response.Content.Headers.ContentDisposition.FileName;
            var yaml = await response.Content.ReadAsStringAsync();

            var profileInfo = Util.Deserializer.Deserialize<Config>(yaml);
            var timestamp = DateTimeOffset.UtcNow.ToUnixTimeSeconds();
            var stringBuilder = new StringBuilder(13);
            stringBuilder.Append(timestamp).Append(".yaml");
            var path = Path.Combine(Directory.GetCurrentDirectory(), ".config", "Profiles");
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }

            var localConfig = await Util.ReadConfigAsync();
            if (localConfig != null)
            {
                localConfig.FileAlias = new Dictionary<long, string> { { timestamp, filename } };

                await Util.WriteConfigAsync(localConfig);
            }

            GlobalConfig.ProxyConfig.Configs.Add(profileInfo);

            await File.WriteAllTextAsync(Path.Combine(path, stringBuilder.ToString()), yaml, Encoding.UTF8);

            _processing = false;
        }
        else
        {
            Snackbar.Configuration.PositionClass = "Defaults.Classes.Position.TopStart";
            Snackbar.Add("请输入链接");
        }
    }

}