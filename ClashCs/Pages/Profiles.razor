@page "/Profiles"
@using System.Text
@using ClashCs.Config
@using ClashCs.Entity
@using ClashCs.Interface
@using ClashCs.Interop;
@inject IHttpClientFactory ClientFactory
@inject ISnackbar Snackbar
@inject IClashService ClashService
@inject IJSRuntime JsRuntime

<PageTitle>Profiles</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium">

    <div class="d-flex flex-row align-center gap-x-6">
        <MudTextField Class="flex-grow-2" T="string" @bind-Text="SubscriptionLink" Label="Subscription Link" Variant="Variant.Outlined"></MudTextField>
        <MudButton Class="flex-grow-1" Disabled="@_processing" Variant="Variant.Filled" Style="height: 52px" OnClick="@GetClashConfigAsync">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Processing</MudText>
            }
            else
            {
                <MudText>Download</MudText>
            }
        </MudButton>
        <MudButton Class="flex-grow-1" Variant="Variant.Filled" Style="height: 52px">Update All</MudButton>
    </div>

    @foreach (var config in Configs())
    {
        <MudCard>
            <MudCardContent>
                <MudText>@config.SubscriptionName</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => OpenWebPage(config.HomeLink)">OpenHome</MudButton>
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => EditConfig(config.FileName)">Edit</MudButton>
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="GenerateQRCode">QRCode</MudButton>
            </MudCardActions>
        </MudCard>
    }

</MudContainer>

@code {
    public string? SubscriptionLink { get; set; }
    private bool _processing;

    private List<LocalProxyConfig> Configs()
    {
        return ClashService.LocalProxyConfigs();
    }

    private void OpenWebPage(string homeLink)
    {
        try
        {
            if (!string.IsNullOrEmpty(homeLink))
            {
                if (OperatingSystem.IsWindows())
                {
                    var result = Win32Interop.ShellExecute(IntPtr.Zero, "open", homeLink, null, null, 1);
                }
            }

        }
        catch (Exception ex)
        {

        }
    }

    private async Task GetClashConfigAsync()
    {
        if (!string.IsNullOrEmpty(SubscriptionLink))
        {
            _processing = true;
            var client = ClientFactory.CreateClient();
            client.DefaultRequestHeaders.UserAgent.ParseAdd(Util.UA);
            var uri = new Uri(SubscriptionLink.Replace('\t', ' ').Trim());
            var response = await client.GetAsync(uri);
            response.EnsureSuccessStatusCode();
            var filename = response.Content.Headers.ContentDisposition.FileName;
            var subInfoExists = response.Headers.TryGetValues("Subscription-Userinfo", out var subInfo);
            var updateIntervalExists = response.Headers.TryGetValues("Profile-Update-Interval", out var updateInterval);
            var urlExists = response.Headers.TryGetValues("profile-web-page-url", out var url);

            var yaml = await response.Content.ReadAsStringAsync();

            var profileInfo = Util.Deserializer<Config>(yaml);
            var timestamp = DateTimeOffset.UtcNow.ToUnixTimeSeconds();
            var stringBuilder = new StringBuilder(13);
            stringBuilder.Append(timestamp).Append(".yaml");
            var path = Util.ProfilesConfigPath;
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }

            var localConfig = GlobalConfig.LocalConfig;
            if (localConfig != null)
            {
                var standardSubInfo = subInfoExists ? Util.ProcessSubInfo(subInfo?.ToList()?[0]) : string.Empty;
                var localProxyConfig = new LocalProxyConfig
                {
                    FileName = stringBuilder.ToString(),
                    SubscriptionName = filename,
                    SubInfo = !string.IsNullOrEmpty(standardSubInfo) ? Util.Deserializer<SubInfo>(standardSubInfo) : new SubInfo(),
                    Url = SubscriptionLink,
                    HomeLink = urlExists ? url?.ToList()?[0] : null,
                };
                localProxyConfig.SetUpdateInterval(updateIntervalExists ? updateInterval.ToList()?[0] : "24");
                localConfig.LocalProxyConfigs.Add(localProxyConfig);

                await Util.WriteConfigAsync(localConfig);
            }

            GlobalConfig.ProxyConfig.Configs.Add(profileInfo);

            await File.WriteAllTextAsync(Path.Join(path, stringBuilder.ToString()), yaml, Encoding.UTF8);

            _processing = false;

            Snackbar.Configuration.PositionClass = "Defaults.Classes.Position.TopStart";
            Snackbar.Add("下载完成");
        }
        else
        {
            Snackbar.Configuration.PositionClass = "Defaults.Classes.Position.TopStart";
            Snackbar.Add("请输入链接");
        }
    }

    private void EditConfig(string filename)
    {
        try
        {
            var path = Path.Join(Util.ProfilesConfigPath, filename);

            if (OperatingSystem.IsWindows())
            {
                var result = Win32Interop.ShellExecute(IntPtr.Zero, "open", path, null, null, 1);
            }

        }
        catch (Exception ex)
        {

        }
    }

    private void ShowInFolder(string filename)
    {
        try
        {
            var path = Path.Join(Util.ProfilesConfigPath, filename);

            if (OperatingSystem.IsWindows())
            {
                var result = Win32Interop.ShellExecute(IntPtr.Zero, "explore", path, null, null, 1);
            }

        }
        catch (Exception ex)
        {

        }
    }


    private async Task Update(string subscriptionLink,string fileName)
    {
        var client = ClientFactory.CreateClient();
        client.DefaultRequestHeaders.UserAgent.ParseAdd(Util.UA);
        var uri = new Uri(SubscriptionLink.Replace('\t', ' ').Trim());
        var response = await client.GetAsync(uri);
        response.EnsureSuccessStatusCode();

        var yaml = await response.Content.ReadAsStringAsync();

        var profileInfo = Util.Deserializer<Config>(yaml);

        using var localFile = File.CreateText(Path.Join(Util.ProfilesConfigPath, fileName));

        await localFile.WriteAsync(yaml);
    }

    private async Task GenerateQRCode()
    {
        var z = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./ClashBase.js");
        await z.InvokeVoidAsync("getPromptInstance");
    }

    private async Task DeleteConfig(string filename)
    {
        var path = Path.Join(Util.ProfilesConfigPath, filename);

        File.Delete(path);

        var currentConfig = GlobalConfig.LocalConfig.LocalProxyConfigs.FirstOrDefault(x => x.FileName == filename);
        GlobalConfig.LocalConfig.LocalProxyConfigs.Remove(currentConfig);
        await Util.WriteConfigAsync(GlobalConfig.LocalConfig);
        Snackbar.Configuration.PositionClass = "Defaults.Classes.Position.TopStart";
        Snackbar.Add("删除成功");
    }
}